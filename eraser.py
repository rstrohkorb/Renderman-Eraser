#!/usr/bin/python
import sys,os.path,subprocess
import prman

# create an instance of the RenderMan interface
ri = prman.Ri() 

# check/compile shader function
# code by Jon Macey
def checkAndCompileShader(shader) :
  	if os.path.isfile(shader+'.oso') != True  or os.stat(shader+'.osl').st_mtime - os.stat(shader+'.oso').st_mtime > 0 :
		print 'compiling shader %s' %(shader)
		try :
			subprocess.check_call(['oslc', shader+'.osl'])
		except subprocess.CalledProcessError :
			sys.exit('shader compilation failed')

# check shaders
diffuseShader = 'diffuseShader'
checkAndCompileShader(diffuseShader)
displacementShader = 'displacementShader'
checkAndCompileShader(displacementShader)

# rib archive - only make ri calls after this
filename = 'eraser.rib'
ri.Begin('__render')
# display options
ri.Display('eraser.exr', 'it', 'rgba')
ri.Format(720,576,1)
ri.Projection(ri.PERSPECTIVE,{ri.FOV:50}) 

ri.DepthOfField(1, 0.1, 3.5)

# integrator options
ri.Hider('raytrace' ,{'int incremental' :[1]})
#ri.ShadingRate(10)
#ri.PixelVariance (0.1)
ri.Integrator ('PxrPathTracer' ,'integrator',{})
ri.Option( 'statistics', {'filename'  : [ 'stats.txt' ] } )
ri.Option( 'statistics', {'endofframe' : [ 1 ] })

# start world
ri.WorldBegin()
# adjust camera
ri.Translate(0, 0, 3.5)
ri.Rotate(-40, 1, 0, 0)
ri.Rotate(95, 0, 1, 0)


# LIGHTING
# dome light
ri.TransformBegin()
ri.AttributeBegin()
ri.Declare('domeLight' ,'string')
ri.Rotate(-90,1,0,0)
ri.Rotate(50,0,0,1)
ri.Light( 'PxrDomeLight', 'domeLight', { 
        'string lightColorMap'  : 'textures/carp_shop.tex'
})
ri.AttributeEnd()
ri.TransformEnd()
# END LIGHTING

ri.TransformBegin()

# specify subdivision mesh values
npolys=[4]*54
points = [-0.5,-0.5,0.5,0.5,-0.5,0.5,-0.338715225,0.5,0.5,0.661284804,0.5,0.5,
		  -0.338715225,0.5,-0.5,0.661284804,0.5,-0.5,-0.5,-0.5,-0.5,0.5,-0.5,-0.5,
		  -0.366419405,0.328228116,-0.5,-0.366419405,0.328228116,0.5,0.633580625,0.328228116,0.5,0.633580625,0.328228116,-0.5,
		  -0.475593418,-0.348674059,-0.5,-0.475593418,-0.348674059,0.5,0.524406552,-0.348674059,0.5,0.524406552,-0.348674059,-0.5,
		  -0.287809134,0.5,-0.5,-0.315513253,0.328228116,-0.5,-0.424687326,-0.348674059,-0.5,-0.449093878,-0.5,-0.5,
		  -0.449093878,-0.5,0.5,-0.424687326,-0.348674059,0.5,-0.315513283,0.328228116,0.5,-0.287809134,0.5,0.5,
		  0.612028658,0.5,-0.5,0.584324479,0.328228116,-0.5,0.475150406,-0.348674059,-0.5,0.450743854,-0.5,-0.5,
		  0.450743854,-0.5,0.5,0.475150406,-0.348674059,0.5,0.584324479,0.328228116,0.5,0.612028658,0.5,0.5,
		  -0.338715225,0.5,-0.313461959,-0.366419405,0.328228116,-0.313461959,-0.475593418,-0.348674059,-0.313461959,-0.5,-0.5,-0.313461959,
		  -0.449093878,-0.5,-0.313461959,0.450743854,-0.5,-0.313461959,0.5,-0.5,-0.313461959,0.524406552,-0.348674059,-0.313461959,
		  0.633580625,0.328228116,-0.313461959,0.661284804,0.5,-0.313461959,0.612028658,0.5,-0.313461959,-0.287809134,0.5,-0.313461959,
		  -0.338715225,0.5,0.259286195,-0.366419435,0.328228116,0.259286195,-0.475593388,-0.348674059,0.259286195,-0.5,-0.5,0.259286195,
		  -0.449093878,-0.5,0.259286195,0.450743854,-0.5,0.259286195,0.5,-0.5,0.259286195,0.524406552,-0.348674059,0.259286195,
		  0.633580625,0.328228116,0.259286195,0.661284804,0.5,0.259286195,0.612028658,0.5,0.259286195,-0.287809134,0.5,0.259286195]
indices = [9,22,23,2,2,23,55,44,4,16,17,8,
		   47,48,20,0,10,52,53,3,45,9,2,44,
		   46,13,9,45,13,21,22,9,14,51,52,10,
		   8,17,18,12,47,0,13,46,0,20,21,13,
		   1,50,51,14,12,18,19,6,16,24,25,17,
		   18,17,25,26,19,18,26,27,20,48,49,28,
		   21,20,28,29,22,21,29,30,23,22,30,31,
		   55,23,31,54,24,5,11,25,26,25,11,15,
		   27,26,15,7,28,49,50,1,29,28,1,14,
		   30,29,14,10,31,30,10,3,54,31,3,53,
		   8,33,32,4,12,34,33,8,6,35,34,12,
		   6,19,36,35,37,36,19,27,38,37,27,7,
		   39,38,7,15,40,39,15,11,41,40,11,5,
		   24,42,41,5,16,43,42,24,32,43,16,4,
		   33,45,44,32,34,46,45,33,35,47,46,34,
		   35,36,48,47,49,48,36,37,50,49,37,38,
		   51,50,38,39,52,51,39,40,53,52,40,41,
		   42,54,53,41,43,55,54,42,44,55,43,32]
st = [0.304620683,0.695178092,0.304176092,0.681642711,0.311507404,0.66516006,0.31147939,0.678076684,0.354028672,0.802786946,0.354116827,0.762156963,
	  0.472418785,0.762784421,0.472350985,0.803434312,0.845576346,0.805476189,0.845580041,0.764763474,0.845151305,0.796421826,0.845035553,0.837707043,
	  0.914677858,0.786637902,0.914837539,0.757637382,0.937585115,0.696948707,0.93758291,0.721179664,0.226368949,0.430790603,0.222691953,0.377486587,
	  0.23869504,0.369696528,0.238570556,0.427051783,0.472028732,0.836120725,0.35377571,0.835617781,0.354028672,0.802786946,0.472350985,0.803434312,
	  0.470758915,0.96492815,0.352778882,0.964994431,0.35377571,0.835617781,0.472028732,0.836120725,0.27759251,0.762569547,0.275285482,0.74659586,
	  0.304176092,0.681642711,0.304620683,0.695178092,0.178286001,0.445524186,0.159628496,0.408184886,0.222691953,0.377486587,0.226368949,0.430790603,
	  0.845035553,0.837707043,0.845151305,0.796421826,0.843462288,0.921178162,0.842904627,0.964719176,0.470475048,0.993723929,0.35255605,0.993917465,
	  0.352778882,0.964994431,0.470758915,0.96492815,0.271550179,0.777635396,0.268826813,0.761116505,0.275285482,0.74659586,0.27759251,0.762569547,
	  0.16753675,0.448817968,0.145530254,0.415047705,0.159628496,0.408184886,0.178286001,0.445524186,0.842904627,0.964719176,0.843462288,0.921178162,
	  0.843084753,0.949068248,0.842428267,0.993113577,0.845580041,0.764763474,0.845644832,0.045108214,0.847198367,0.0666479394,0.845151305,0.796421826,
	  0.843462288,0.921178162,0.845151305,0.796421826,0.847198367,0.0666479394,0.853320658,0.151529625,0.843084753,0.949068248,0.843462288,0.921178162,
	  0.853320658,0.151529625,0.85468924,0.170505494,0.937585115,0.696948707,0.914837539,0.757637382,0.917660654,0.245012313,0.937624276,0.268632948,
	  0.275285482,0.74659586,0.268826813,0.761116505,0.220687374,0.469122767,0.234505802,0.46423763,0.304176092,0.681642711,0.275285482,0.74659586,
	  0.234505802,0.46423763,0.296317458,0.442385793,0.311507404,0.66516006,0.304176092,0.681642711,0.296317458,0.442385793,0.312002897,0.436840594,
	  0.472418785,0.762784421,0.354116827,0.762156963,0.355675519,0.0439649783,0.473617911,0.0442401692,0.845644832,0.045108214,0.845648348,0.00571507215,
	  0.847310424,0.0267009158,0.847198367,0.0666479394,0.853320658,0.151529625,0.847198367,0.0666479394,0.847310424,0.0267009158,0.853860259,0.109399907,
	  0.85468924,0.170505494,0.853320658,0.151529625,0.853860259,0.109399907,0.855324447,0.127887815,0.937624276,0.268632948,0.917660654,0.245012313,
	  0.917815208,0.216951787,0.937626421,0.245187432,0.234505802,0.46423763,0.220687374,0.469122767,0.218052283,0.453139335,0.232273564,0.448781669,
	  0.296317458,0.442385793,0.234505802,0.46423763,0.232273564,0.448781669,0.295887291,0.429289132,0.312002897,0.436840594,0.296317458,0.442385793,
	  0.295887291,0.429289132,0.312030017,0.424342662,0.473617911,0.0442401692,0.355675519,0.0439649783,0.355760813,0.00465193391,0.473683506,0.00490784599,
	  0.845035553,0.837707043,0.753396928,0.837317288,0.753884017,0.804974556,0.845576346,0.805476189,0.842904627,0.964719176,0.75147754,0.964770496,
	  0.753396928,0.837317288,0.845035553,0.837707043,0.842428267,0.993113577,0.751048446,0.993263543,0.75147754,0.964770496,0.842904627,0.964719176,
	  0.842428267,0.993113577,0.843084753,0.949068248,0.860712647,0.902038336,0.860178232,0.942387581,0.870159745,0.188810006,0.860712647,0.902038336,
	  0.843084753,0.949068248,0.85468924,0.170505494,0.870676875,0.149768651,0.870159745,0.188810006,0.85468924,0.170505494,0.855324447,0.127887815,
	  0.115235314,0.319340795,0.0931685492,0.334695578,0.076114893,0.308525771,0.100776911,0.290405184,0.213943005,0.250656426,0.115235314,0.319340795,
	  0.100776911,0.290405184,0.21109356,0.2093492,0.238991246,0.233226985,0.213943005,0.250656426,0.21109356,0.2093492,0.239087716,0.188780293,
	  0.845644832,0.045108214,0.754246891,0.0448949561,0.754265666,0.00551675633,0.845648348,0.00571507215,0.845580041,0.764763474,0.753903449,0.764277279,
	  0.754246891,0.0448949561,0.845644832,0.045108214,0.753884017,0.804974556,0.753903449,0.764277279,0.845580041,0.764763474,0.845576346,0.805476189,
	  0.753396928,0.837317288,0.472028732,0.836120725,0.472350985,0.803434312,0.753884017,0.804974556,0.75147754,0.964770496,0.470758915,0.96492815,
	  0.472028732,0.836120725,0.753396928,0.837317288,0.751048446,0.993263543,0.470475048,0.993723929,0.470758915,0.96492815,0.75147754,0.964770496,
	  0.860178232,0.942387581,0.860712647,0.902038336,0.914837539,0.757637382,0.914677858,0.786637902,0.917660654,0.245012313,0.914837539,0.757637382,
	  0.860712647,0.902038336,0.870159745,0.188810006,0.917815208,0.216951787,0.917660654,0.245012313,0.870159745,0.188810006,0.870676875,0.149768651,
	  0.159628496,0.408184886,0.145530254,0.415047705,0.0931685492,0.334695578,0.115235314,0.319340795,0.222691953,0.377486587,0.159628496,0.408184886,
	  0.115235314,0.319340795,0.213943005,0.250656426,0.23869504,0.369696528,0.222691953,0.377486587,0.213943005,0.250656426,0.238991246,0.233226985,
	  0.754246891,0.0448949561,0.473617911,0.0442401692,0.473683506,0.00490784599,0.754265666,0.00551675633,0.753903449,0.764277279,0.472418785,0.762784421,
	  0.473617911,0.0442401692,0.754246891,0.0448949561,0.472350985,0.803434312,0.472418785,0.762784421,0.753903449,0.764277279,0.753884017,0.804974556]

# parameters to feed into shaders
age = 1.5
seed = 2

# eraser patterns
ri.AttributeBegin()
# diffuse shader
ri.Pattern(diffuseShader,diffuseShader,
{
	'float age' : age,
	'float seed': seed
})
# displacement shader
ri.Pattern(displacementShader, displacementShader,
{
	'float age' : age
})
ri.Attribute('displacementbound',
{
	'sphere' : [0.5],
	'coordinatesystem' : ['object']
})
ri.Displace('PxrDisplace','displacement',
{
	'reference float dispAmount' : ['displacementShader:resultAmount'], 
	'reference vector dispVector' : ['displacementShader:resultVector']
})
# eraser bxdf
ri.Bxdf( 'PxrSurface','eraser_bxdf', 
{
	'reference color diffuseColor' : ['diffuseShader:result'],
	#'float diffuseRoughness' : [0.7],
	'color specularFaceColor' : [0.13,0.13,0.13], 
	'color specularEdgeColor' : [1,1,1],
	'float specularRoughness' : [0.995],
	'color fuzzColor' : [0,0,0], 
	'color clearcoatFaceColor' : [0.007,0.007,0.007], 
	'color clearcoatEdgeColor' : [0.09,0.09,0.09], 
	'float clearcoatRoughness' : [0.316]
})
# place eraser
ri.TransformBegin()
ri.Translate(-0.112984844, 0.25, 0)
ri.Rotate(235,0,1,0)
ri.Scale(2, 0.5, 1)

ri.HierarchicalSubdivisionMesh('catmull-clark', 
					npolys, 
					indices, 
					['creasemethod', 'facevaryingpropagatecorners', 'interpolateboundary', 'facevaryinginterpolateboundary'], 
						[0, 0, 1, 1, 0, 0, 1, 0, 0, 1, 0, 0], [1, 1, 3], [], ['chaikin'],
					{'vertex point P':points, 'facevarying float[2] st':st})

ri.TransformEnd()
ri.AttributeEnd()

# table textures
ri.Pattern('PxrTexture', 'planks_diffuse', 
{
	'string filename' : ['textures/planks_diff.tex']
})
ri.Pattern('PxrTexture', 'planks_roughness', 
{
	'string filename' : ['textures/planks_rough.tex']
})
ri.Pattern('PxrTexture', 'planks_specular', 
{
	'string filename' : ['textures/planks_spec.tex']
})
# table bxdf
ri.Bxdf( 'PxrDisney','table_bxdf', 
{
	'reference color baseColor'  : ['planks_diffuse:resultRGB'],
	'reference float specular' : ['planks_specular:resultR'], 
	'reference float roughness' : ['planks_roughness:resultR']
})
# place table
ri.Polygon({ri.P:[-10, 0.01, 5, -5, 0.01, -5, 5, 0.01, -5, 5, 0.01, 5]})

# back to camera view
ri.TransformEnd()
# end world
ri.WorldEnd()
# end rib archive
ri.End()
